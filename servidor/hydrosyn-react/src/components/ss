import '../styles/theme.css';
import React, { useEffect, useState } from 'react';
import { supabase } from '../utils/supabaseClient';
import useTexts from '../utils/UseTexts';

function Notifications() {
    const texts = useTexts();

    const [attempts, setAttempts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // 游댳 Estados nuevos
    const [page, setPage] = useState(0); // p치gina actual
    const [searchEmail, setSearchEmail] = useState('');
    const [searchDate, setSearchDate] = useState('');
    const [sortOrder, setSortOrder] = useState('desc'); // asc o desc
    const limit = 50; // 游댳 n칰mero m치ximo por p치gina

    // 游댳 Cargar intentos con filtros, paginaci칩n y orden
    const fetchLoginAttempts = async () => {
        try {
            setLoading(true);

            // Construimos la consulta
            let query = supabase
                .from('login_attempts_view') // 游녣 mejor crear una VIEW con email+reason+created_at
                .select('*', { count: 'exact' })
                .order('created_at', { ascending: sortOrder === 'asc' })
                .range(page * limit, page * limit + limit - 1);

            // Filtro por email si est치 escrito
            if (searchEmail) {
                query = query.ilike('user_email', `%${searchEmail}%`);
            }

            // Filtro por fecha exacta (YYYY-MM-DD)
            if (searchDate) {
                query = query.gte('created_at', `${searchDate} 00:00:00`).lte('created_at', `${searchDate} 23:59:59`);
            }

            const { data, error } = await query;

            if (error) throw error;
            setAttempts(data);
        } catch (e) {
            setError(e.message);
        } finally {
            setLoading(false);
        }
    };

    // Llamamos a fetchLoginAttempts cada vez que cambien filtros, p치gina u orden
    useEffect(() => {
        fetchLoginAttempts();
    }, [page, searchEmail, searchDate, sortOrder]);

    return (
        <div className="div-main-login">
            <h1>{texts.notifications}</h1>

            {/* 游댳 Controles de b칰squeda y orden */}
            <div style={{ marginBottom: '15px', display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
                <input
                    type="text"
                    placeholder="Buscar por email"
                    value={searchEmail}
                    onChange={(e) => setSearchEmail(e.target.value)}
                />
                <input
                    type="date"
                    value={searchDate}
                    onChange={(e) => setSearchDate(e.target.value)}
                />
                <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                    <option value="desc">M치s recientes primero</option>
                    <option value="asc">M치s antiguos primero</option>
                </select>
            </div>

            {loading ? (
                <p>Cargando...</p>
            ) : attempts.length === 0 ? (
                <p>No hay resultados</p>
            ) : (
                <>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                        <thead>
                            <tr>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Email</th>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Raz칩n</th>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Fecha y Hora</th>
                            </tr>
                        </thead>
                        <tbody>
                            {attempts.map((attempt, index) => (
                                <tr key={index}>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>{attempt.user_email}</td>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>{attempt.reason}</td>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>
                                        {new Date(attempt.created_at).toLocaleString()}
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* 游댳 Controles de paginaci칩n */}
                    <div style={{ marginTop: '15px', display: 'flex', justifyContent: 'space-between' }}>
                        <button disabled={page === 0} onClick={() => setPage((p) => p - 1)}>
                            Anterior
                        </button>
                        <span>P치gina {page + 1}</span>
                        <button disabled={attempts.length < limit} onClick={() => setPage((p) => p + 1)}>
                            Siguiente
                        </button>
                    </div>
                </>
            )}
        </div>
    );
}

export default Notifications;
