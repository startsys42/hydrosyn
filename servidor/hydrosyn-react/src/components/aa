import { serve } from 'https://deno.land/std/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { SmtpClient } from "https://deno.land/x/smtp@v0.7.0/mod.ts";
const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
};
const supabaseAdmin = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'));
serve(async (req) => {
    // Manejar la solicitud OPTIONS de pre-vuelo para CORS.
    if (req.method === 'OPTIONS') {
        return new Response('ok', {
            headers: corsHeaders
        });
    }
    if (req.method !== 'POST') {
        return new Response('Método no permitido', {
            status: 405,
            headers: corsHeaders
        });
    }
    try {
        // --- 1. VALIDACIÓN DEL USUARIO AUTORIZADO (CORREGIDO) ---
        // Obtener el token del Authorization header
        const authHeader = req.headers.get('authorization') || '';
        if (!authHeader) {
            return new Response(JSON.stringify({
                error: 'Falta el token de autorización'
            }), {
                status: 401,
                headers: {
                    ...corsHeaders,
                    'Content-Type': 'application/json'
                }
            });
        }
        // Crear un cliente de Supabase con el token del usuario.
        // Esto valida el token de forma segura sin usar el rol de servicio.
        const token = authHeader.replace(/^Bearer\s+/i, '');
        const supabase = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_ANON_KEY'), {
            global: {
                headers: {
                    authorization: token
                }
            }
        });
        console.error('Error de auth:', JSON.stringify(token));
        const authUrl = `${Deno.env.get('SUPABASE_URL')}/auth/v1/user`;
        const authResponse = await fetch(authUrl, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'apikey': Deno.env.get('SUPABASE_ANON_KEY') ?? ''
            }
        });
        if (!authResponse.ok) {
            const errorData = await authResponse.json();
            console.error('Error en validación de token:', errorData);
            return new Response(JSON.stringify({
                error: 'Token inválido',
                details: errorData.error_description || 'Error al validar el token'
            }), {
                status: 401,
                headers: {
                    ...corsHeaders,
                    'Content-Type': 'application/json'
                }
            });
        }
        const userData = await authResponse.json();
        console.log('Usuario validado:', userData.id);
        // --- 2. VERIFICACIÓN DE ROL DE ADMINISTRADOR ---
        const { data: roleData, error: roleError } = await supabaseAdmin.from('roles').select('user').eq('user', userData.id).single();
        if (roleError || !roleData) {
            return new Response(JSON.stringify({
                error: 'No autorizado, el usuario no tiene rol de admin'
            }), {
                status: 403,
                headers: {
                    ...corsHeaders,
                    'Content-Type': 'application/json'
                }
            });
        }

        const { data: existingUser, error: fetchUserError } = await supabaseAdmin
            .from('auth.users')
            .select('id')
            .eq('email', email)
            .single();

        let userId;

        if (fetchUserError || !existingUser) {
            // --- 3. CREACIÓN DEL NUEVO USUARIO Y ENVÍO DE EMAIL ---
            const { email } = await req.json();
            if (!email) {
                return new Response(JSON.stringify({
                    error: 'Email requerido'
                }), {
                    status: 400,
                    headers: {
                        ...corsHeaders,
                        'Content-Type': 'application/json'
                    }
                });
            }
            // Lógica para crear la contraseña aleatoria...
            const length = 10;
            const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const numbers = "0123456789";
            const allChars = letters + numbers;
            let password = "";
            password += letters.charAt(Math.floor(Math.random() * letters.length));
            password += numbers.charAt(Math.floor(Math.random() * numbers.length));
            for (let i = 2; i < length; i++) {
                password += allChars.charAt(Math.floor(Math.random() * allChars.length));
            }
            password = password.split('').sort(() => 0.5 - Math.random()).join('');
            // Crear usuario con contraseña aleatoria
            const { data: newUserData, error: createError } = await supabaseAdmin.auth.admin.createUser({
                email,
                password: password,
                email_confirmed: true
            });
            if (createError) {
                return new Response(JSON.stringify({
                    error: createError.message
                }), {
                    status: 400,
                    headers: {
                        ...corsHeaders,
                        'Content-Type': 'application/json'
                    }
                });
            }
            // Insertar en profile
            /*
            const { error: insertProfileError } = await supabaseAdmin.from("profile").insert({
              user: newUserData.user.id,
              is_active: true
            });
            if (insertProfileError) {
              return new Response(JSON.stringify({
                error: insertProfileError.message
              }), {
                status: 500,
                headers: {
                  ...corsHeaders,
                  'Content-Type': 'application/json'
                }
              });
            }
            */
            const { error: insertAdminError } = await supabaseAdmin.from("admin_user").insert({
                user: newUserData.user.id
            });
            if (insertAdminError) {
                return new Response(JSON.stringify({
                    error: insertAdminError.message
                }), {
                    status: 500,
                    headers: {
                        ...corsHeaders,
                        'Content-Type': 'application/json'
                    }
                });
            }
            // Enviar correo con contraseña usando SMTP Gmail
            const client = new SmtpClient();
            const connectionConfig = {
                hostname: Deno.env.get("SMTP_HOST") || "smtp.gmail.com",
                port: Number(Deno.env.get("SMTP_PORT")) || 587,
                username: Deno.env.get("SMTP_USERNAME") || "",
                password: Deno.env.get("SMTP_PASSWORD") || ""
            };
            console.log("Conectando al servidor SMTP...");
            console.error(Deno.env.get("SMTP_USERNAME"));
            await client.connect(connectionConfig);
            console.log("Enviando correo a:", email);
            await client.send({
                from: Deno.env.get("SMTP_FROM_EMAIL") || "no-reply@hydrosyn.com",
                to: email,
                subject: "Tu nueva cuenta y contraseña en Hydrosyn",
                content: `Hola,\n\nTu cuenta ha sido creada. Aquí está tu contraseña temporal:\n${password}\n\nPor favor, cambia tu contraseña después de iniciar sesión.\n\nSaludos,\nEquipo Hydrosyn`,
                html: `<p>Hola,</p>
               <p>Tu cuenta ha sido creada. Aquí está tu contraseña temporal:</p>
               <p><strong>${password}</strong></p>
               <p>Por favor, cambia tu contraseña después de iniciar sesión.</p>
               <p>Saludos,<br>Equipo Hydrosyn</p>`
            });
            console.log("Correo enviado exitosamente");
            await client.close();
            return new Response(JSON.stringify({
                user: newUserData.user,
                message: "Usuario creado y correo enviado."
            }), {
                status: 200,
                headers: {
                    ...corsHeaders,
                    'Content-Type': 'application/json'
                }
            });
        } catch (error) {
            console.error('Error en la función:', error.message);
            return new Response(JSON.stringify({
                error: "Error interno del servidor: " + error.message
            }), {
                status: 500,
                headers: {
                    ...corsHeaders,
                    'Content-Type': 'application/json'
                }
            });
        }
    });

  // Aquí opcionalmente envías el email con la contraseña
} else {
    const { data: adminEntry, error: fetchAdminError } = await supabaseAdmin
        .from('admin_user')
        .select('user')
        .eq('user', userId)
        .single();

    if (fetchAdminError && fetchAdminError.code !== 'PGRST116') {
        // Error distinto de "no encontrado"
        throw new Error(fetchAdminError.message);
    }

    if (!adminEntry) {
        // No existe en admin_user → insertamos
        const { error: insertAdminError } = await supabaseAdmin
            .from('admin_user')
            .insert({ user: userId });

        if (insertAdminError) throw new Error(insertAdminError.message);
    }
}